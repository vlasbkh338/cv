{"version":3,"file":"ssr.mjs","sources":["effector-react/useStore.ts","effector-react/withDisplayName.ts","effector-react/ssr.ts","effector-react/createGate.ts","effector-react/useList.ts","effector-react/useIsomorphicLayoutEffect.ts","effector-react/throw.ts"],"sourcesContent":["import {Store, is, clearNode, createStore} from 'effector'\nimport React from 'react'\nimport {useIsomorphicLayoutEffect} from './useIsomorphicLayoutEffect'\nimport {throwError} from './throw'\n\nexport function useStore<State>(store: Store<State>): State {\n  if (!is.store(store)) throwError('expect useStore argument to be a store')\n  const currentStore = React.useRef(store)\n  const setState = React.useState(store.getState())[1]\n  useIsomorphicLayoutEffect(() => {\n    if (currentStore.current === store) {\n      setState(store.getState())\n    }\n    currentStore.current = store\n    return store.updates.watch(setState)\n  }, [store])\n  return store.getState()\n}\n\nexport function useStoreMap<State, Result, Keys extends ReadonlyArray<any>>({\n  store,\n  keys,\n  fn,\n}: {\n  store: Store<State>\n  keys: Keys\n  fn(state: State, keys: Keys): Result\n}): Result {\n  if (!is.store(store)) throwError('useStoreMap expects a store')\n  if (!Array.isArray(keys)) throwError('useStoreMap expects an array as keys')\n  if (typeof fn !== 'function') throwError('useStoreMap expects a function')\n  const result: Store<Result> = React.useMemo(\n    () =>\n      createStore(fn(store.getState(), keys)).on(store, (_, state) =>\n        fn(state, keys),\n      ),\n    keys,\n  )\n  const state = useStore(result)\n  useIsomorphicLayoutEffect(\n    () => () => {\n      result.off(store)\n      clearNode(result, {deep: true})\n    },\n    keys,\n  )\n  return state\n}\n","export function withDisplayName(name: string, Component: any) {\n  Component.displayName = name\n  return Component\n}\n","import React from 'react'\nimport {is, launch} from 'effector'\nimport {\n  useStore as commonUseStore,\n  useStoreMap as commonUseStoreMap,\n} from './useStore'\nimport {useList as commonUseList} from './useList'\nimport {withDisplayName} from './withDisplayName'\nimport {useGate as commonUseGate} from './createGate'\nimport {Gate} from './index.h'\n\nfunction createDefer() {\n  const result = {} as any\n  result.req = new Promise((rs, rj) => {\n    result.rs = rs\n    result.rj = rj\n  })\n  return result\n}\n\nconst Scope = React.createContext(null)\nexport const {Provider} = Scope\n\nfunction useScopeStore(store: any) {\n  const scope = React.useContext(Scope) as any\n  if (!scope)\n    throw Error('No scope found, consider adding <Provider> to app root')\n  return scope.find(store).meta.wrapped\n}\n\nexport function useGate<Props>(\n  GateComponent: Gate<Props>,\n  props: Props = {} as any,\n) {\n  const open = useEvent(GateComponent.open)\n  const close = useEvent(GateComponent.close)\n  const set = useEvent(GateComponent.set)\n  const ForkedGate = React.useMemo(\n    () =>\n      ({\n        open,\n        close,\n        set,\n      } as Gate<Props>),\n    [GateComponent, open],\n  )\n  commonUseGate(ForkedGate, props)\n}\n\nexport function createStoreConsumer(store: any) {\n  return (props: any) => {\n    const state = useStore(store)\n    return props.children(state)\n  }\n}\n\nexport function createContextComponent(\n  store: any,\n  context: any,\n  renderProp: any,\n) {\n  return (props: any) => {\n    const ctx = React.useContext(context)\n    const state = useStore(store)\n    return renderProp(props, state, ctx)\n  }\n}\n\nexport function createComponent(shape: any) {\n  throw new Error('not implemented')\n}\n\nexport function createReactState(store: any, Component: any) {\n  const wrappedComponentName =\n    Component.displayName || Component.name || 'Unknown'\n  return withDisplayName(`Connect(${wrappedComponentName})`, (props: any) =>\n    React.createElement(Component, Object.assign({}, props, useStore(store))),\n  )\n}\n\nexport function connect(Component: any) {\n  return (store: any) => createReactState(store, Component)\n}\n\n/** useStore wrapper for scopes */\nexport function useStore(store: any) {\n  return commonUseStore(useScopeStore(store))\n}\n/** useList wrapper for scopes */\nexport function useList(store: any, opts: any) {\n  return commonUseList(useScopeStore(store), opts)\n}\n/** useStoreMap wrapper for scopes */\nexport function useStoreMap({store, keys, fn}: any) {\n  return commonUseStoreMap({\n    store: useScopeStore(store),\n    keys,\n    fn,\n  })\n}\n\n/**\nbind event to scope\n\nworks like React.useCallback, but for scopes\n*/\nexport function useEvent(event: any) {\n  const scope = React.useContext(Scope) as any\n  const unit = scope.find(event)\n  const result = is.effect(event)\n    ? (params: any) => {\n        const req = createDefer()\n        launch(unit, {params, req})\n        return req.req\n      }\n    : (payload: any) => {\n        launch(unit, payload)\n        return payload\n      }\n  return React.useCallback(result, [scope, event])\n}\n","import React from 'react'\nimport {createStore, createApi, launch, Store} from 'effector'\nimport {Gate} from './index.h'\nimport {useIsomorphicLayoutEffect} from './useIsomorphicLayoutEffect'\nimport {withDisplayName} from './withDisplayName'\n\nexport function useGate<Props>(\n  GateComponent: Gate<Props>,\n  props: Props = {} as any,\n) {\n  const propsRef = React.useRef<any>(null)\n  useIsomorphicLayoutEffect(() => {\n    GateComponent.open(propsRef.current)\n    return () => GateComponent.close(propsRef.current) as any\n  }, [GateComponent])\n  if (!shallowCompare(propsRef.current, props)) {\n    propsRef.current = props\n    GateComponent.set(props)\n  }\n}\n\nfunction shallowCompare(a: any, b: any) {\n  if (a === b) return true\n  if (\n    typeof a === 'object' &&\n    a !== null &&\n    typeof b === 'object' &&\n    b !== null\n  ) {\n    const aKeys = Object.keys(a)\n    const bKeys = Object.keys(b)\n    if (aKeys.length !== bKeys.length) return false\n    for (let i = 0; i < aKeys.length; i++) {\n      const key = aKeys[i]\n      if (a[key] !== b[key]) return false\n    }\n    return true\n  }\n  return false\n}\n\nexport function createGate<Props>(\n  name: string = 'gate',\n  defaultState: Props = {} as any,\n): Gate<Props> {\n  let domain\n  if (typeof name === 'object' && name !== null) {\n    if ('defaultState' in name) {\n      //@ts-ignore\n      defaultState = name.defaultState\n    }\n    //@ts-ignore\n    if (name.domain) domain = name.domain\n    //@ts-ignore\n    name = name.name || 'gate'\n  }\n  //@ts-ignore\n  const status = createStore(Boolean(false), {named: 'status'})\n  //@ts-ignore\n  const state: Store<Props> = createStore(defaultState, {named: 'state'})\n  const {set} = createApi(state, {\n    set: (_, state) => state,\n  })\n\n  const {open, close} = createApi(status, {\n    open: () => Boolean(true),\n    close: () => Boolean(false),\n  })\n  function GateComponent(props: Props) {\n    useGate(GateComponent as any, props)\n    return null\n  }\n  GateComponent.open = open\n  GateComponent.close = close\n  GateComponent.status = status\n  GateComponent.state = state\n  GateComponent.set = set\n  state.reset(close)\n\n  if (domain) {\n    const {hooks} = domain\n    launch({\n      target: [\n        hooks.store,\n        hooks.store,\n        hooks.event,\n        hooks.event,\n        hooks.event,\n      ] as any,\n      params: [status, state, open, close, set],\n    })\n  }\n  return withDisplayName(`Gate:${name}`, GateComponent)\n}\n","/* eslint-disable react-hooks/rules-of-hooks */\nimport React from 'react'\nimport {Store, is} from 'effector'\nimport {useStoreMap} from './useStore'\nimport {withDisplayName} from './withDisplayName'\nimport {throwError} from './throw'\n\nexport function useList<T>(\n  list: Store<T[]>,\n  renderItem:\n    | {\n        keys?: any[]\n        fn(item: T, index: number): React.ReactNode\n      }\n    | ((item: T, index: number) => React.ReactNode),\n): React.ReactNode {\n  let keys = [] as any[]\n  let fn\n  if (typeof renderItem === 'object' && renderItem !== null) {\n    if (renderItem.keys) keys = renderItem.keys\n    fn = renderItem.fn\n  } else {\n    fn = renderItem\n  }\n  if (!is.store(list)) throwError('expect useList first argument to be a store')\n  if (typeof fn !== 'function')\n    throwError(\"expect useList's renderItem to be a function\")\n  if (!Array.isArray(keys)) throwError(\"expect useList's keys to be an array\")\n  const Item = React.useMemo(() => {\n    const Item = withDisplayName(\n      `${list.shortName || 'Unknown'}.Item`,\n      ({index, keys}: {index: number; keys: any[]}) => {\n        const item = useStoreMap({\n          store: list,\n          keys: [index, ...keys],\n          fn: (list, keys) => list[keys[0]],\n        })\n        return fnRef.current(item, index)\n      },\n    )\n    return React.memo(Item)\n  }, [list])\n  const length = useStoreMap({\n    store: list,\n    keys: [list],\n    fn: list => list.length,\n  })\n  const fnRef = React.useRef(fn)\n  fnRef.current = fn\n  const keysSelfMemo = React.useMemo(() => keys, keys)\n  return Array.from({length}, (_, i) =>\n    React.createElement(Item, {\n      index: i,\n      key: i,\n      keys: keysSelfMemo,\n    }),\n  )\n}\n","import React from 'react'\n\nexport const useIsomorphicLayoutEffect =\n  typeof window !== 'undefined' ? React.useLayoutEffect : React.useEffect\n","export const throwError = (message: string) => {\n  throw Error(message)\n}\n"],"names":["useStore","store","is","throwError","currentStore","React","useRef","setState","useState","getState","useIsomorphicLayoutEffect","current","updates","watch","useStoreMap","keys","fn","Array","isArray","result","useMemo","createStore","on","_","state","off","clearNode","deep","withDisplayName","name","Component","displayName","useScopeStore","scope","useContext","Scope","Error","find","meta","wrapped","useGate","GateComponent","props","open","useEvent","close","set","propsRef","a","b","aKeys","Object","bKeys","length","i","key","shallowCompare","commonUseGate","createStoreConsumer","children","createContextComponent","context","renderProp","ctx","createComponent","createReactState","createElement","assign","connect","commonUseStore","useList","opts","list","renderItem","Item","shortName","index","item","fnRef","memo","keysSelfMemo","from","commonUseList","commonUseStoreMap","event","unit","effect","params","req","Promise","rs","rj","createDefer","launch","payload","useCallback","window","useLayoutEffect","useEffect","message","createContext","Provider"],"mappings":"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"}
{"version":3,"file":"effector.mjs","sources":["effector/createNode.ts","effector/naming.ts","effector/collection.ts","effector/region.ts","effector/createUnit.ts","effector/combine.ts","effector/defer.ts","effector/createEffect.ts","effector/attach.ts","effector/createApi.ts","effector/createDomain.ts","effector/fromObservable.ts","effector/sample.ts","effector/guard.ts","effector/merge.ts","effector/restore.ts","effector/split.ts","effector/fork.ts","effector/observable.ts","effector/validate.ts","effector/throw.ts","effector/is.ts","effector/id.ts","effector/bind.ts","effector/step.ts","effector/stateRef.ts","effector/caller.ts","effector/getter.ts","effector/own.ts","effector/kernel.ts","effector/config.ts","effector/clearNode.ts","effector/subscription.ts","effector/forward.ts","effector/watch.ts"],"sourcesContent":["import {Graph, Graphite, Cmd, StateRef} from './index.h'\nimport {getGraph, getOwners, getLinks} from './getter'\nimport {nextNodeID} from './id'\n\nconst arrifyNodes = (list: Graphite | Graphite[] = []): Graph[] => {\n  const result = []\n  if (Array.isArray(list)) {\n    for (let i = 0; i < list.length; i++) {\n      if (Array.isArray(list[i])) result.push(...(list[i] as any))\n      else result.push(list[i])\n    }\n  } else {\n    result.push(list)\n  }\n  return result.map(getGraph)\n}\nexport const addToReg = (\n  {hasRef, type, data}: any,\n  reg: Record<string, StateRef>,\n) => {\n  let store\n  if (hasRef) {\n    store = data.store\n    reg[store.id] = store\n  }\n  if (type === 'mov' && data.to === 'store') {\n    store = data.target\n    reg[store.id] = store\n  }\n}\nexport function createNode({\n  node = [],\n  from,\n  source,\n  parent = from || source,\n  to,\n  target,\n  child = to || target,\n  scope = {},\n  meta = {},\n  family: familyRaw = {type: 'regular'},\n}: {\n  node?: Array<Cmd | false | void | null>\n  from?: Graphite | Graphite[]\n  source?: Graphite | Graphite[]\n  parent?: Graphite | Graphite[]\n  to?: Graphite | Graphite[]\n  target?: Graphite | Graphite[]\n  child?: Graphite | Graphite[]\n  scope?: {[name: string]: any}\n  meta?: {[name: string]: any}\n  family?: {\n    type?: 'regular' | 'crosslink' | 'domain'\n    links?: Graphite | Graphite[]\n    owners?: Graphite | Graphite[]\n  }\n} = {}): Graph {\n  const sources = arrifyNodes(parent)\n  const links = arrifyNodes(familyRaw.links)\n  const owners = arrifyNodes(familyRaw.owners)\n  const seq: Cmd[] = []\n  const reg: {[id: string]: StateRef} = {}\n  for (let i = 0; i < node.length; i++) {\n    const item = node[i]\n    if (!item) continue\n    seq.push(item)\n    addToReg(item, reg)\n  }\n  const result: Graph = {\n    id: nextNodeID(),\n    seq,\n    next: arrifyNodes(child),\n    meta,\n    scope,\n    family: {\n      type: familyRaw.type || 'crosslink',\n      links,\n      owners,\n    },\n    reg,\n  }\n  for (let i = 0; i < links.length; i++) {\n    getOwners(links[i]).push(result)\n  }\n  for (let i = 0; i < owners.length; i++) {\n    getLinks(owners[i]).push(result)\n  }\n  for (let i = 0; i < sources.length; i++) {\n    sources[i].next.push(result)\n  }\n  return result\n}\n","import {Store, Domain} from './unit.h'\nimport {is} from './is'\nimport {getParent} from './getter'\n\nexport const joinName = (unit: any, tag: string) => '' + unit.shortName + tag\n\nexport const mapName = (unit: any, name?: string) =>\n  name == null ? joinName(unit, ' â†’ *') : name\n\nexport function unitObjectName(objOrArr: any, method: string = 'combine') {\n  let name = method + '('\n  let comma = ''\n  let i = 0\n  //@ts-ignore\n  for (const key in objOrArr) {\n    //@ts-ignore\n    const unit = objOrArr[key]\n    if (unit != null) {\n      name += comma\n      //@ts-ignore\n      name += is.unit(unit) ? unit.compositeName.fullName : unit.toString()\n    }\n    i += 1\n    /* inlined max object names constant */\n    if (i === 25) break\n    comma = ', '\n  }\n  name += ')'\n  return name\n}\n\nexport function setStoreName<State>(store: Store<State>, rawName: string) {\n  const compositeName = createName(rawName, getParent(store))\n  store.shortName = rawName\n  if (!store.compositeName) {\n    store.compositeName = compositeName\n    return\n  }\n  const currentComposite = store.compositeName\n  currentComposite.path = compositeName.path\n  currentComposite.shortName = compositeName.shortName\n  currentComposite.fullName = compositeName.fullName\n}\n\nexport type CompositeName = {\n  shortName: string\n  fullName: string\n  path: string[]\n}\n\nexport function createName(name: string, parent?: Domain): CompositeName {\n  let path: string[]\n  let fullName\n  let composite\n  const shortName = name\n  if (!parent) {\n    if (name.length === 0) {\n      path = []\n    } else {\n      path = [name]\n    }\n    fullName = name\n  } else {\n    composite = parent.compositeName\n    if (name.length === 0) {\n      path = composite.path\n      fullName = composite.fullName\n    } else {\n      path = composite.path.concat([name])\n      if (composite.fullName.length === 0) {\n        fullName = name\n      } else {\n        fullName = '' + composite.fullName + '/' + name\n      }\n    }\n  }\n  return {shortName, fullName, path}\n}\n","export const forIn = (obj: any, cb: (value: any, key: string) => void) => {\n  for (const key in obj) {\n    cb(obj[key], key)\n  }\n}\n\nexport const includes = (list: any[], item: any) => list.includes(item)\n\nexport const removeItem = (list: any[], item: any) => {\n  const pos = list.indexOf(item)\n  if (pos !== -1) {\n    list.splice(pos, 1)\n  }\n}\n\nexport function forEach<T>(\n  list: T[],\n  fn: (item: T, index: number, list: T[]) => void,\n): void\nexport function forEach<T>(list: Set<T>, fn: (item: T) => void): void\nexport function forEach(list: any, fn: Function) {\n  list.forEach(fn)\n}\n","import {getValue, getGraph, getParent} from './getter'\nimport {own} from './own'\n\ntype RegionStack = {\n  parent: RegionStack | null\n  value: any\n  template: any\n}\n\nexport const addToRegion = (unit: any) => {\n  if (regionStack) own(getValue(regionStack), [unit])\n  return unit\n}\n\nlet regionStack: RegionStack | null = null\n\nexport const readTemplate = () => regionStack && regionStack.template\n\nexport function withRegion(unit: any, cb: () => void) {\n  regionStack = {\n    parent: regionStack,\n    value: unit,\n    template:\n      getGraph(unit).meta.template || (regionStack && regionStack.template),\n  }\n  try {\n    return cb()\n  } finally {\n    regionStack = getParent(regionStack)\n  }\n}\n","import {observableSymbol} from './observable'\n\nimport {is, isObject, isFunction, assertObject} from './is'\nimport {Store, Event} from './unit.h'\n\nimport {step} from './typedef'\nimport {createStateRef, readRef} from './stateRef'\nimport {nextUnitID} from './id'\nimport {callStackAReg, callARegStack, callStack} from './caller'\nimport {bind} from './bind'\nimport {own} from './own'\nimport {createNode} from './createNode'\nimport {launch, currentPage, forkPage, setCurrentPage} from './kernel'\n\nimport {Subscriber, Config} from './index.h'\nimport {createName, mapName, joinName} from './naming'\nimport {createLinkNode} from './forward'\nimport {watchUnit} from './watch'\nimport {createSubscription} from './subscription'\nimport {addToRegion, readTemplate} from './region'\nimport {\n  getSubscribers,\n  getConfig,\n  getNestedConfig,\n  getStoreState,\n  getGraph,\n  getParent,\n} from './getter'\nimport {includes} from './collection'\nimport {throwError} from './throw'\n\nconst normalizeConfig = (part: any, config: any) => {\n  if (isObject(part)) {\n    normalizeConfig(getConfig(part), config)\n    if (part.name != null) {\n      if (isObject(part.name)) normalizeConfig(part.name, config)\n      else if (isFunction(part.name)) config.handler = part.name\n      else config.name = part.name\n    }\n    if (part.loc) config.loc = part.loc\n    if (part.sid || part.sid === null) config.sid = part.sid\n    if (part.handler) config.handler = part.handler\n    if (getParent(part)) config.parent = getParent(part)\n    if ('strict' in part) config.strict = part.strict\n    if (part.named) config.named = part.named\n    normalizeConfig(getNestedConfig(part), config)\n  }\n  return config\n}\n\nexport const applyParentHook = (\n  source: any,\n  target: any,\n  hookType: 'event' | 'effect' = 'event',\n) => {\n  if (getParent(source)) getParent(source).hooks[hookType](target)\n}\n\nlet isStrict: boolean\nexport const initUnit = (\n  kind: any,\n  unit: any,\n  rawConfigA: any,\n  rawConfigB?: any,\n) => {\n  const config = normalizeConfig(\n    {\n      name: rawConfigB,\n      config: rawConfigA,\n    },\n    {},\n  )\n  const id = nextUnitID()\n  const {parent = null, sid = null, strict = true, named = null} = config\n  const name = named ? named : config.name || (kind === 'domain' ? '' : id)\n  const compositeName = createName(name, parent)\n  unit.kind = kind\n  unit.id = id\n  unit.sid = sid\n  unit.shortName = name\n  unit.parent = parent\n  unit.compositeName = compositeName\n  unit.defaultConfig = config\n  unit.thru = (fn: Function) => fn(unit)\n  unit.getType = () => compositeName.fullName\n  if (kind !== 'domain') {\n    unit.subscribe = (observer: Subscriber<any>) => {\n      assertObject(observer)\n      return unit.watch(\n        isFunction(observer)\n          ? observer\n          : (upd: any) => {\n              if (observer.next) {\n                observer.next(upd)\n              }\n            },\n      )\n    }\n    unit[observableSymbol] = () => unit\n  }\n  isStrict = strict\n  return {unit: kind, name, sid, named}\n}\nexport const createNamedEvent = (named: string) => createEvent({named})\n\nconst createComputation = (from: any, to: any, op: any, fn: Function) =>\n  createLinkNode(from, to, {\n    scope: {fn},\n    node: [step.compute({fn: callStack})],\n    meta: {op},\n  })\n\nconst createEventFiltration = (event: any, op: string, fn: any, node: any) => {\n  let config\n  if (isObject(fn)) {\n    config = fn\n    fn = fn.fn\n  }\n  const mapped = createEvent(joinName(event, ' â†’? *'), config)\n  createLinkNode(event, mapped, {\n    scope: {fn},\n    node,\n    meta: {op},\n  })\n  return mapped\n}\n\nfunction callCreate(unit: any, template: any, payload: any, args: any[]): any {\n  const oldPage = currentPage\n  let page = null\n  if (template) {\n    page = currentPage\n    while (page && page.template !== template) {\n      page = getParent(page)\n    }\n  }\n  setCurrentPage(page)\n  const result = unit.create(payload, args)\n  setCurrentPage(oldPage)\n  return result\n}\n\nexport function createEvent<Payload = any>(\n  nameOrConfig?: any,\n  maybeConfig?: any,\n): Event<Payload> {\n  const event: any = (payload: Payload, ...args: any[]) => {\n    if (currentPage) {\n      return callCreate(event, template, payload, args)\n    }\n    return event.create(payload, args)\n  }\n  event.graphite = createNode({\n    meta: initUnit('event', event, maybeConfig, nameOrConfig),\n  })\n  //eslint-disable-next-line no-unused-vars\n  event.create = (payload: any, _: any) => {\n    const target = forkPage ? forkPage.find(event) : event\n    launch(target, payload)\n    return payload\n  }\n  event.watch = bind(watchUnit, event)\n  event.map = (fn: any) => {\n    let config\n    let name\n    if (isObject(fn)) {\n      config = fn\n      name = fn.name\n      fn = fn.fn\n    }\n    const mapped = createEvent(mapName(event, name), config)\n    createComputation(event, mapped, 'map', fn)\n    return mapped\n  }\n  event.filter = (fn: any) =>\n    createEventFiltration(event, 'filter', fn.fn ? fn : fn.fn, [\n      step.filter({fn: callStack}),\n    ])\n  event.filterMap = (fn: any) =>\n    createEventFiltration(event, 'filterMap', fn, [\n      step.compute({fn: callStack}),\n      step.check.defined(),\n    ])\n  event.prepend = (fn: any) => {\n    const contramapped: Event<any> = createEvent('* â†’ ' + event.shortName, {\n      parent: getParent(event),\n    })\n    const template = readTemplate()\n    if (template) {\n      getGraph(contramapped).seq.push(template.upward)\n    }\n    createComputation(contramapped, event, 'prepend', fn)\n    applyParentHook(event, contramapped)\n    return contramapped\n  }\n  const template = readTemplate()\n  if (template) {\n    getGraph(event).meta.nativeTemplate = template\n  }\n  return addToRegion(event)\n}\n\nexport function createStore<State>(\n  defaultState: State,\n  props?: Config,\n): Store<State> {\n  const plainState = createStateRef(defaultState)\n  const oldState = createStateRef(defaultState)\n  const updates = createNamedEvent('updates')\n  const template = readTemplate()\n  plainState.after = [{type: 'copy', to: oldState}]\n  if (template) {\n    template.plain.push(plainState, oldState)\n  }\n  const plainStateId = plainState.id\n  const store: any = {\n    subscribers: new Map(),\n    updates,\n    defaultState,\n    stateRef: plainState,\n    getState() {\n      let targetRef = plainState\n      let reachedPage\n      if (currentPage) {\n        let page = currentPage\n        while (page && !page.reg[plainStateId]) {\n          page = getParent(page)\n        }\n        if (page) reachedPage = page\n      }\n      if (!reachedPage && forkPage && forkPage.reg[plainStateId]) {\n        reachedPage = forkPage\n      }\n      if (reachedPage) targetRef = reachedPage.reg[plainStateId]\n      return readRef(targetRef)\n    },\n    setState(state: any) {\n      let target\n      if (forkPage) {\n        target = forkPage.nodeMap[getGraph(store).id]\n      }\n      if (!target) target = store\n      launch({\n        target,\n        params: state,\n        defer: true,\n      })\n    },\n    reset(...units: any[]) {\n      for (const unit of units) store.on(unit, () => store.defaultState)\n      return store\n    },\n    on(events: any, fn: Function) {\n      if (Array.isArray(events)) {\n        for (const event of events) {\n          onEvent(event, fn)\n        }\n      } else {\n        onEvent(events, fn)\n      }\n      return store\n    },\n    off(unit: any) {\n      const currentSubscription = getSubscribers(store).get(unit)\n      if (currentSubscription) {\n        currentSubscription()\n        getSubscribers(store).delete(unit)\n      }\n      return store\n    },\n    map(fn: any, firstState?: any) {\n      let config\n      let name\n      if (isObject(fn)) {\n        config = fn\n        name = fn.name\n        firstState = fn.firstState\n        fn = fn.fn\n      }\n      let lastResult\n      const storeState = store.getState()\n      const template = readTemplate()\n      if (template) {\n        lastResult = null\n      } else if (storeState !== undefined) {\n        lastResult = fn(storeState, firstState)\n      }\n\n      const innerStore: Store<any> = createStore(lastResult, {\n        name: mapName(store, name),\n        config,\n        strict: false,\n      })\n      const linkNode = updateStore(store, innerStore, 'map', false, fn)\n\n      getStoreState(innerStore).before = [\n        {\n          type: 'map',\n          fn,\n          from: plainState,\n        },\n      ]\n      if (template) {\n        if (!includes(template.plain, plainState)) {\n          if (!includes(linkNode.seq, template.loader)) {\n            linkNode.seq.unshift(template.loader)\n          }\n        }\n      }\n      return innerStore\n    },\n    watch(eventOrFn: any, fn?: Function) {\n      if (!fn || !is.unit(eventOrFn)) {\n        const subscription = watchUnit(store, eventOrFn)\n        const template = readTemplate()\n        if (template) {\n          template.watch.push({\n            of: plainState,\n            fn: eventOrFn,\n          })\n        } else {\n          eventOrFn(store.getState())\n        }\n        return subscription\n      }\n      if (!isFunction(fn)) throwError('second argument should be a function')\n      return eventOrFn.watch((payload: any) => fn(store.getState(), payload))\n    },\n  }\n  function onEvent(event: any, fn: Function) {\n    store.off(event)\n    getSubscribers(store).set(\n      event,\n      createSubscription(updateStore(event, store, 'on', true, fn)),\n    )\n  }\n  store.graphite = createNode({\n    scope: {state: plainState},\n    node: [\n      step.check.defined(),\n      step.update({\n        store: plainState,\n      }),\n      step.check.changed({\n        store: oldState,\n      }),\n      step.update({\n        store: oldState,\n      }),\n    ],\n    child: updates,\n    meta: initUnit('store', store, props),\n  })\n  if (isStrict && defaultState === undefined)\n    throwError(\"current state can't be undefined, use null instead\")\n  if (template) {\n    getGraph(store).meta.nativeTemplate = template\n  }\n  own(store, [updates])\n  return addToRegion(store)\n}\n\nconst updateStore = (\n  from: any,\n  store: Store<any>,\n  op: string,\n  stateFirst: boolean,\n  fn: Function,\n) => {\n  const storeRef = getStoreState(store)\n  const node = [\n    step.mov({store: storeRef, to: 'a'}),\n    step.compute({\n      fn: stateFirst ? callARegStack : callStackAReg,\n    }),\n    step.check.defined(),\n    step.check.changed({store: storeRef}),\n    step.update({store: storeRef}),\n  ]\n  const template = readTemplate()\n  if (template) {\n    node.unshift(template.loader)\n    node.push(template.upward)\n    if (is.store(from)) {\n      const ref = getStoreState(from)\n      if (!includes(template.plain, ref)) {\n        //if (!includes(node, template.loader)) {\n        //  node.unshift(template.loader)\n        //}\n        if (!includes(template.closure, ref)) {\n          template.closure.push(ref)\n        }\n        if (!storeRef.before) storeRef.before = []\n        storeRef.before.push({\n          type: 'closure',\n          of: ref,\n        })\n      }\n    } else {\n      //if (!includes(node, template.loader)) {\n      //  node.unshift(template.loader)\n      //}\n    }\n  }\n  return createLinkNode(from, store, {\n    scope: {fn},\n    node,\n    meta: {op},\n  })\n}\n","import {Store} from './unit.h'\nimport {createStore} from './createUnit'\nimport {createStateRef} from './stateRef'\nimport {step} from './typedef'\nimport {onConfigNesting} from './config'\nimport {getStoreState} from './getter'\nimport {is, isFunction, isObject} from './is'\nimport {unitObjectName} from './naming'\nimport {createLinkNode} from './forward'\nimport {throwError} from './throw'\nimport {readTemplate} from './region'\nimport {forIn, includes} from './collection'\n\nexport function combine(...args: any[]): Store<any> {\n  let handler\n  let stores\n  let config\n  onConfigNesting(args[0], (injectedData, userConfig) => {\n    config = injectedData\n    args = userConfig\n  })\n  const rawHandler = args[args.length - 1]\n  if (isFunction(rawHandler)) {\n    stores = args.slice(0, -1)\n    handler = rawHandler\n  } else {\n    stores = args\n  }\n\n  let structStoreShape\n  let shapeReady\n  if (stores.length === 1) {\n    const obj = stores[0]\n    /*\n      without edge case combine(Color, (Color) => '~')\n      */\n    if (!is.store(obj)) {\n      /*\n      case combine([R,G,B], ([R,G,B]) => '~')\n      case combine({R,G,B}, ({R,G,B}) => '~')\n\n      edge case combine([Color], ([Color]) => '~')\n      edge case combine({Color}, ({Color}) => '~')\n\n      edge case combine([R,G,B])\n      edge case combine({R,G,B})\n\n      edge case combine([Color])\n      edge case combine({Color})\n      */\n      structStoreShape = obj\n      shapeReady = true\n    }\n  }\n  if (!shapeReady) {\n    /*\n    case combine(R,G,B, (R,G,B) => '~')\n    */\n    structStoreShape = stores\n    /*\n    without edge case combine(R,G,B)\n    without edge case combine(Color)\n    */\n    if (handler) {\n      handler = spreadArgs(handler)\n    }\n  }\n  if (!isObject(structStoreShape)) throwError('shape should be an object')\n  return storeCombination(\n    Array.isArray(structStoreShape),\n    structStoreShape,\n    config,\n    handler,\n  )\n}\n\nconst spreadArgs = (fn: Function) => (list: any[]) => fn(...list)\n\nconst storeCombination = (\n  isArray: boolean,\n  obj: any,\n  config?: string,\n  fn?: (upd: any) => any,\n) => {\n  const clone = isArray\n    ? (list: any) => list.slice()\n    : (obj: any) => Object.assign({}, obj)\n  const defaultState: any = isArray ? [] : {}\n  const template = readTemplate()\n  const stateNew = clone(defaultState)\n  const rawShape = createStateRef(stateNew)\n  const isFresh = createStateRef(true)\n  rawShape.type = isArray ? 'list' : 'shape'\n  if (template) {\n    template.plain.push(rawShape, isFresh)\n  }\n  const store = createStore(stateNew, {\n    name: config ? config : unitObjectName(obj),\n  })\n  const node = [\n    step.check.defined(),\n    step.mov({\n      store: rawShape,\n      to: 'a',\n    }),\n    //prettier-ignore\n    step.filter({\n      fn: (upd, {key}, {a}) => upd !== a[key],\n    }),\n    step.mov({\n      store: isFresh,\n      to: 'b',\n    }),\n    step.compute({\n      fn(upd, {clone, key}, reg) {\n        if (reg.b) {\n          reg.a = clone(reg.a)\n        }\n        reg.a[key] = upd\n      },\n    }),\n    step.mov({\n      from: 'a',\n      target: rawShape,\n    }),\n    step.mov({\n      from: 'value',\n      store: false,\n      target: isFresh,\n    }),\n    step.barrier({priority: 'barrier'}),\n    step.mov({\n      from: 'value',\n      store: true,\n      target: isFresh,\n    }),\n    step.mov({store: rawShape}),\n    fn && step.compute({fn}),\n    step.check.changed({\n      store: getStoreState(store),\n    }),\n  ]\n  const before: any[] = (rawShape.before = [])\n  forIn(obj, (child, key) => {\n    if (!is.store(child)) {\n      stateNew[key] = defaultState[key] = child\n      return\n    }\n    defaultState[key] = child.defaultState\n    stateNew[key] = child.getState()\n    const linkNode = createLinkNode(child, store, {\n      scope: {key, clone},\n      node,\n      meta: {op: 'combine'},\n    })\n    const childRef = getStoreState(child)\n    before.push({\n      type: 'field',\n      field: key,\n      from: childRef,\n    })\n    if (template) {\n      if (!includes(template.plain, childRef)) {\n        linkNode.seq.unshift(template.loader)\n      }\n    }\n  })\n\n  store.defaultShape = obj\n  rawShape.after = [\n    fn\n      ? {\n          type: 'map',\n          to: getStoreState(store),\n          fn,\n        }\n      : {\n          type: 'copy',\n          to: getStoreState(store),\n        },\n  ]\n  if (!template) {\n    store.defaultState = fn\n      ? (getStoreState(store).current = fn(stateNew))\n      : defaultState\n  }\n  return store\n}\n","export function createDefer(): {\n  rs: (value: any) => any\n  rj: (value: any) => any\n  req: Promise<any>\n} {\n  const result = {} as {\n    rs: (value: any) => any\n    rj: (value: any) => any\n    req: Promise<any>\n  }\n  result.req = new Promise((rs, rj) => {\n    result.rs = rs\n    result.rj = rj\n  })\n  result.req.catch(err => {})\n  return result\n}\n","import {step} from './typedef'\nimport {getGraph, getParent} from './getter'\nimport {own} from './own'\nimport {createNode} from './createNode'\nimport {launch, setForkPage, forkPage} from './kernel'\nimport {createNamedEvent, createStore, createEvent} from './createUnit'\nimport {createDefer} from './defer'\nimport {isObject, isFunction} from './is'\nimport {throwError} from './throw'\n\nexport function createEffect<Payload, Done>(\n  nameOrConfig: any,\n  maybeConfig: any,\n) {\n  const instance: any = createEvent(nameOrConfig, maybeConfig)\n  let handler =\n    instance.defaultConfig.handler ||\n    (() => throwError(`no handler used in ${instance.getType()}`))\n\n  getGraph(instance).meta.onCopy = ['runner']\n  getGraph(instance).meta.unit = instance.kind = 'effect'\n  instance.use = (fn: Function) => {\n    if (!isFunction(fn)) throwError('.use argument should be a function')\n    handler = fn\n    return instance\n  }\n  const anyway = (instance.finally = createNamedEvent('finally'))\n  const done = (instance.done = (anyway as any).filterMap({\n    named: 'done',\n    fn({status, params, result}: any) {\n      if (status === 'done') return {params, result}\n    },\n  }))\n  const fail = (instance.fail = (anyway as any).filterMap({\n    named: 'fail',\n    fn({status, params, error}: any) {\n      if (status === 'fail') return {params, error}\n    },\n  }))\n  const doneData = (instance.doneData = done.map({\n    named: 'doneData',\n    fn: ({result}: any) => result,\n  }))\n  const failData = (instance.failData = fail.map({\n    named: 'failData',\n    fn: ({error}: any) => error,\n  }))\n\n  const effectRunner = createNode({\n    scope: {\n      getHandler: instance.use.getCurrent = () => handler,\n      finally: anyway,\n    },\n    node: [\n      step.run({\n        fn({params, req}, {finally: anyway, getHandler}, {page, forkPage}) {\n          const onResolve = onSettled({\n            params,\n            req,\n            ok: true,\n            anyway,\n            page,\n            forkPage,\n          })\n          const onReject = onSettled({\n            params,\n            req,\n            ok: false,\n            anyway,\n            page,\n            forkPage,\n          })\n          let result\n          try {\n            result = getHandler()(params)\n          } catch (err) {\n            return void onReject(err)\n          }\n          if (isObject(result) && isFunction(result.then)) {\n            result.then(onResolve, onReject)\n          } else {\n            onResolve(result)\n          }\n        },\n      }),\n    ],\n    meta: {\n      op: 'fx',\n      fx: 'runner',\n      onCopy: ['finally'],\n    },\n  })\n  getGraph(instance).scope.runner = effectRunner\n  getGraph(instance).seq.push(\n    step.compute({\n      fn(params, scope, stack) {\n        // empty stack means that this node was launched directly\n        if (!getParent(stack)) return params\n        return {\n          params,\n          req: {\n            rs(data: any) {},\n            rj(data: any) {},\n          },\n        }\n      },\n    }),\n    step.run({\n      fn(upd, {runner}, {forkPage}) {\n        launch({\n          target: runner,\n          params: upd,\n          defer: true,\n          forkPage,\n        })\n        return upd.params\n      },\n    }),\n  )\n  instance.create = (params: Payload) => {\n    const req = createDefer()\n    const payload = {params, req}\n    if (forkPage) {\n      const savedFork = forkPage\n      req.req.finally(() => {\n        setForkPage(savedFork)\n      })\n      launch(forkPage.find(instance), payload)\n    } else {\n      launch(instance, payload)\n    }\n    return req.req\n  }\n\n  const inFlight = (instance.inFlight = createStore(0, {named: 'inFlight'})\n    .on(instance, x => x + 1)\n    .on(anyway, x => x - 1))\n\n  const pending = (instance.pending = inFlight.map({\n    //@ts-ignore\n    fn: amount => amount > 0,\n    named: 'pending',\n  }))\n\n  own(instance, [\n    anyway,\n    done,\n    fail,\n    doneData,\n    failData,\n    pending,\n    inFlight,\n    effectRunner,\n  ])\n  return instance\n}\n\nexport const onSettled = ({\n  params,\n  req,\n  ok,\n  anyway,\n  page,\n  forkPage,\n}: {\n  params: any\n  req: {\n    rs(_: any): any\n    rj(_: any): any\n  }\n  ok: boolean\n  anyway: any\n  page: any\n  forkPage: any\n}) => (data: any) =>\n  launch({\n    target: [anyway, sidechain],\n    params: [\n      ok\n        ? {\n            status: 'done',\n            params,\n            result: data,\n          }\n        : {\n            status: 'fail',\n            params,\n            error: data,\n          },\n      {\n        fn: ok ? req.rs : req.rj,\n        value: data,\n      },\n    ],\n    defer: true,\n    page,\n    forkPage,\n  })\n\nconst sidechain = createNode({\n  node: [\n    step.run({\n      fn({fn, value}) {\n        fn(value)\n      },\n    }),\n  ],\n  meta: {op: 'fx', fx: 'sidechain'},\n})\n","import {combine} from './combine'\nimport {createEffect, onSettled} from './createEffect'\nimport {applyParentHook} from './createUnit'\nimport {onConfigNesting} from './config'\nimport {getGraph, getStoreState} from './getter'\nimport {own} from './own'\nimport {is} from './is'\nimport {step} from './typedef'\nimport {launch} from './kernel'\nimport {addToReg} from './createNode'\nimport {throwError} from './throw'\n\nexport function attach(config: any) {\n  let injected\n  onConfigNesting(config, (injectedData, userConfig) => {\n    injected = injectedData\n    config = userConfig\n  })\n  let {source, effect, mapParams} = config\n  if (!source && !mapParams)\n    throwError('either `mapParams` or `source` should be defined')\n  if (!mapParams) mapParams = (_: any, source: any) => source\n  const attached = createEffect(config, injected)\n  const {runner} = getGraph(attached).scope\n\n  let runnerSteps\n  const runnerFn = (\n    {params, req}: any,\n    {finally: anyway, effect}: any,\n    {a: states, page, forkPage}: any,\n  ) => {\n    const rj = onSettled({\n      params,\n      req,\n      ok: false,\n      anyway,\n      page,\n      forkPage,\n    })\n    let computedParams\n    try {\n      computedParams = mapParams(params, states)\n    } catch (err) {\n      return rj(err)\n    }\n    launch({\n      target: effect,\n      params: {\n        params: computedParams,\n        req: {\n          rs: onSettled({\n            params,\n            req,\n            ok: true,\n            anyway,\n            page,\n            forkPage,\n          }),\n          rj,\n        },\n      },\n      page,\n      defer: true,\n    })\n  }\n  if (source) {\n    let state\n    if (is.store(source)) state = source\n    else {\n      state = combine(source)\n      own(attached, [state])\n    }\n    const readStateRef = step.mov({\n      from: 'store',\n      store: getStoreState(state),\n      to: 'a',\n    })\n    runnerSteps = [\n      /* let another side-effects run first */\n      step.run({fn: _ => _}),\n      /* read state. assumed it already stable here because of previous step */\n      readStateRef,\n      /* no need for step.run because of first step */\n      step.compute({fn: runnerFn}),\n    ]\n    addToReg(readStateRef, runner.reg)\n  } else {\n    runnerSteps = [step.run({fn: runnerFn})]\n  }\n  runner.scope.effect = effect\n  runner.meta.onCopy.push('effect')\n  runner.seq.splice(0, 1, ...runnerSteps)\n  applyParentHook(effect, attached, 'effect')\n  return attached\n}\n","import {Store, Event} from './unit.h'\nimport {createEvent, applyParentHook} from './createUnit'\nimport {forIn} from './collection'\nimport {getParent} from './getter'\nimport {processArgsToConfig} from './config'\n\nexport function createApi(...args: [Store<any>, {[key: string]: Function}]) {\n  let [[store, setters], metadata] = processArgsToConfig(args)\n  const result: Record<string, Event<any>> = {}\n  forIn(setters, (fn, key) => {\n    const event = (result[key] = createEvent(key, {\n      parent: getParent(store),\n      config: metadata,\n    }))\n    store.on(event, fn)\n    applyParentHook(store, event)\n  })\n  return result\n}\n","import {Store, Event, Effect, Domain} from './unit.h'\nimport {own} from './own'\nimport {createNode} from './createNode'\nimport {Config} from './index.h'\nimport {\n  createEvent,\n  createStore,\n  createNamedEvent,\n  initUnit,\n} from './createUnit'\nimport {createEffect} from './createEffect'\nimport {forward} from './forward'\nimport {addToRegion} from './region'\nimport {forIn} from './collection'\nimport {getParent} from './getter'\n\nconst createHook = (trigger: Event<any>, acc: Set<any>, node: any) => {\n  trigger.watch(data => {\n    own(node, [data])\n    acc.add(data)\n    if (!data.ownerSet) data.ownerSet = acc\n    if (!getParent(data)) data.parent = node\n  })\n  own(node, [trigger])\n  return (hook: (data: any) => any) => {\n    acc.forEach(hook)\n    return trigger.watch(hook)\n  }\n}\n\nexport function createDomain(nameOrConfig: any, maybeConfig?: any): Domain {\n  const domains: Set<Domain> = new Set()\n  const stores: Set<Store<any>> = new Set()\n  const effects: Set<Effect<any, any, any>> = new Set()\n  const events: Set<Event<any>> = new Set()\n\n  const node = createNode({\n    family: {type: 'domain'},\n  })\n\n  const result: any = {\n    history: {\n      domains,\n      stores,\n      effects,\n      events,\n    },\n    graphite: node,\n  }\n\n  node.meta = initUnit('domain', result, maybeConfig, nameOrConfig)\n  const [event, effect, store, domain] = [\n    'onEvent',\n    'onEffect',\n    'onStore',\n    'onDomain',\n  ].map(createNamedEvent)\n\n  result.hooks = {\n    event,\n    effect,\n    store,\n    domain,\n  }\n  result.onCreateEvent = createHook(event, events, result)\n  result.onCreateEffect = createHook(effect, effects, result)\n  result.onCreateStore = createHook(store, stores, result)\n  result.onCreateDomain = createHook(domain, domains, result)\n\n  result.createEvent = result.event = (nameOrConfig: any, config?: Config) =>\n    event(\n      createEvent(nameOrConfig, {\n        parent: result,\n        config,\n      }),\n    )\n  result.createEffect = result.effect = (nameOrConfig: any, config?: Config) =>\n    effect(\n      createEffect(nameOrConfig, {\n        parent: result,\n        config,\n      }),\n    )\n  result.createDomain = result.domain = (nameOrConfig: any, config?: Config) =>\n    createDomain({\n      name: nameOrConfig,\n      parent: result,\n      config,\n    })\n  result.createStore = result.store = (state: any, config?: Config) =>\n    store(\n      createStore(state, {\n        parent: result,\n        config,\n      }),\n    )\n  addToRegion(result)\n  const parent = getParent(result)\n  if (parent) {\n    forIn(result.hooks, (from, key) => {\n      forward({from, to: parent.hooks[key]})\n    })\n    parent.hooks.domain(result)\n  }\n  return result\n}\n","import {observableSymbol} from './observable'\nimport {Event} from './unit.h'\nimport {clearNode} from './clearNode'\nimport {createEvent} from './createUnit'\nimport {bind2} from './bind'\nimport {assertObject} from './is'\nimport {throwError} from './throw'\n\nexport function fromObservable<T>(observable: any): Event<T> {\n  assertObject(observable)\n  const observableItem =\n    observableSymbol in observable ? observable[observableSymbol]() : observable\n  if (!observableItem.subscribe)\n    throwError('expect observable to have .subscribe')\n  const event = createEvent<T>()\n  const disposer = bind2(clearNode, event, undefined)\n  observableItem.subscribe({\n    next: event,\n    error: disposer,\n    complete: disposer,\n  })\n  return event\n}\n","import {combine} from './combine'\nimport {step} from './typedef'\nimport {createStateRef, readRef} from './stateRef'\nimport {callStackAReg, callARegStack} from './caller'\nimport {processArgsToConfig} from './config'\nimport {getStoreState, getGraph} from './getter'\nimport {own} from './own'\nimport {is} from './is'\nimport {createStore} from './createUnit'\nimport {createEvent} from './createUnit'\nimport {createLinkNode} from './forward'\nimport {createNode} from './createNode'\nimport {addToRegion, readTemplate} from './region'\nimport {throwError} from './throw'\nimport {includes} from './collection'\n\nexport function sample(...args: any): any {\n  let target\n  let name\n  let [[source, clock, fn], metadata] = processArgsToConfig(args)\n  let sid\n  let greedy\n  //config case\n  if (clock === undefined && 'source' in source) {\n    if ('clock' in source && source.clock == null)\n      throwError('config.clock should be defined')\n    clock = source.clock\n    fn = source.fn\n    greedy = source.greedy\n    //optional target & name accepted only from config\n    target = source.target\n    name = source.name\n    sid = source.sid\n    source = source.source\n  }\n  if (!is.unit(source)) {\n    source = combine(source)\n  }\n  if (clock === undefined) {\n    //still undefined!\n    clock = source\n  }\n  name = metadata || name || source.shortName\n  const template = readTemplate()\n  const isUpward = !!target\n  if (!target) {\n    if (is.store(source) && is.store(clock)) {\n      const initialState = fn\n        ? fn(readRef(getStoreState(source)), readRef(getStoreState(clock)))\n        : readRef(getStoreState(source))\n      target = createStore(initialState, {name, sid})\n    } else {\n      target = createEvent(name)\n      if (template) {\n        getGraph(target).seq.push(template.loader)\n      }\n    }\n  }\n  const targetTemplate =\n    isUpward && is.unit(target) && getGraph(target).meta.nativeTemplate\n  if (is.store(source)) {\n    const sourceRef = getStoreState(source)\n    own(source, [\n      createLinkNode(clock, target, {\n        scope: {fn, targetTemplate},\n        node: [\n          template && template.loader,\n          //@ts-ignore\n          !greedy && step.barrier({priority: 'sampler'}),\n          step.mov({\n            store: sourceRef,\n            to: fn ? 'a' : 'stack',\n          }),\n          fn && step.compute({fn: callARegStack}),\n          template && isUpward && template.upward,\n        ],\n        meta: {op: 'sample', sample: 'store'},\n      }),\n    ])\n    if (template) {\n      if (\n        !includes(template.plain, sourceRef) &&\n        !includes(template.closure, sourceRef)\n      ) {\n        template.closure.push(sourceRef)\n      }\n    }\n  } else {\n    const hasSource = createStateRef(false)\n    const sourceState = createStateRef()\n    const clockState = createStateRef()\n    if (template) {\n      template.plain.push(hasSource, sourceState, clockState)\n    }\n    addToRegion(\n      createNode({\n        parent: source,\n        node: [\n          step.update({store: sourceState}),\n          step.mov({\n            from: 'value',\n            store: true,\n            target: hasSource,\n          }),\n        ],\n        family: {\n          owners: [source, target, clock],\n          links: target,\n        },\n        meta: {op: 'sample', sample: 'source'},\n      }),\n    )\n    own(source, [\n      createLinkNode(clock, target, {\n        scope: {\n          fn,\n          targetTemplate,\n        },\n        node: [\n          template && template.loader,\n          step.update({store: clockState}),\n          step.mov({store: hasSource}),\n          step.filter({fn: hasSource => hasSource}),\n          //@ts-ignore\n          !greedy && step.barrier({priority: 'sampler'}),\n          step.mov({store: sourceState}),\n          step.mov({\n            store: clockState,\n            to: 'a',\n          }),\n          fn && step.compute({fn: callStackAReg}),\n          template && isUpward && template.upward,\n        ],\n        meta: {op: 'sample', sample: 'clock'},\n      }),\n    ])\n  }\n  return target\n}\n","import {processArgsToConfig} from './config'\nimport {createLinkNode} from './forward'\nimport {sample} from './sample'\nimport {createEvent} from './createUnit'\nimport {combine} from './combine'\nimport {step} from './typedef'\nimport {callStack} from './caller'\nimport {is, isFunction} from './is'\nimport {createNode} from './createNode'\nimport {addToRegion} from './region'\nimport {throwError} from './throw'\n\nexport function guard(...args: any[]) {\n  const meta: Record<string, any> = {op: 'guard'}\n  let rawName = 'guard'\n  let [[source, config], metadata] = processArgsToConfig(args)\n  if (metadata) {\n    meta.config = metadata\n    if (metadata.name) rawName = metadata.name\n  }\n  if (!config) {\n    config = source\n    source = config.source\n  }\n  const {filter, greedy, name = rawName} = config\n  const target = config.target || createEvent(name, meta.config)\n  if (!is.unit(source)) source = combine(source)\n\n  if (is.unit(filter)) {\n    sample({\n      source: filter,\n      clock: source,\n      target: addToRegion(\n        createNode({\n          node: [\n            step.filter({\n              fn: ({guard}) => guard,\n            }),\n            step.compute({\n              fn: ({data}) => data,\n            }),\n          ],\n          child: target,\n          meta,\n          family: {\n            owners: [source, filter, target],\n            links: target,\n          },\n        }),\n      ),\n      fn: (guard: any, data: any) => ({guard, data}),\n      greedy,\n      name,\n    })\n  } else {\n    if (!isFunction(filter)) throwError('`filter` should be function or unit')\n    createLinkNode(source, target, {\n      scope: {fn: filter},\n      node: [step.filter({fn: callStack})],\n      meta,\n    })\n  }\n  return target\n}\n","import {Store, Event, Effect} from './unit.h'\nimport {createEvent} from './createUnit'\nimport {forward} from './forward'\nimport {unitObjectName} from './naming'\n\nexport function merge<T>(\n  events: Array<Event<T> | Store<T> | Effect<T, any, any>>,\n): Event<T> {\n  const result = createEvent(unitObjectName(events, 'merge'))\n  forward({\n    from: events,\n    to: result,\n    meta: {op: 'merge'},\n  })\n  return result\n}\n","import {createStore} from './createUnit'\nimport {is} from './is'\nimport {forIn} from './collection'\nimport {getParent} from './getter'\n\nexport function restore(obj: any, defaultState: any, config?: any): any {\n  if (is.store(obj)) {\n    return obj\n  }\n  if (is.unit(obj)) {\n    const domain = getParent(obj)\n    let result\n    if (is.event(obj)) {\n      result = createStore(defaultState, {\n        parent: domain,\n        name: obj.shortName,\n        É”: config,\n      }).on(obj, (_, v) => v)\n    }\n    if (is.effect(obj)) {\n      result = createStore(defaultState, {\n        parent: domain,\n        name: obj.shortName,\n        É”: config,\n      }).on(obj.done, (_: any, {result}: any) => result)\n    }\n    if (domain) domain.hooks.store(result)\n    return result\n  }\n  const result: Record<string, any> = Array.isArray(obj) ? [] : {}\n  forIn(obj, (value, key) => {\n    result[key] = is.store(value) ? value : createStore(value, {name: key})\n  })\n  return result\n}\n","import {Event} from './unit.h'\nimport {is} from './is'\nimport {forIn} from './collection'\nimport {forward} from './forward'\nimport {processArgsToConfig} from './config'\n\nexport function split(...args: any[]): any {\n  let cases: any\n  let [[unit, match], metadata] = processArgsToConfig(args)\n  const knownCases = !match\n  if (knownCases) {\n    cases = unit.cases\n    match = unit.match\n    unit = unit.source\n  }\n  const result = {} as Record<string, Event<any>>\n  let current: Event<any> = is.store(unit) ? unit.updates : unit\n  forIn(match, (fn, key) => {\n    //@ts-ignore\n    result[key] = current.filter({fn, config: metadata})\n    //@ts-ignore\n    current = current.filter({\n      fn: data => !fn(data),\n      config: metadata,\n    })\n  })\n  result.__ = current\n  if (knownCases) {\n    forIn(result, (event, key) => {\n      if (cases[key]) {\n        forward({\n          from: event,\n          to: cases[key],\n        })\n      }\n    })\n  } else return result\n}\n","import {getGraph} from './getter'\nimport {bind} from './bind'\nimport {createDefer} from './defer'\nimport {watchUnit} from './watch'\nimport {is, isObject} from './is'\nimport {throwError} from './throw'\nimport {launch, forkPage, setForkPage} from './kernel'\nimport {createNode} from './createNode'\nimport {step} from './typedef'\nimport {Domain, Store} from './unit.h'\nimport {Graph, StateRef} from './index.h'\nimport {removeItem, forEach, includes} from './collection'\n\n/**\nhydrate state on client\n\nconst root = createDomain()\nhydrate(root, {\n  values: window.__initialState__\n})\n\n*/\nexport function hydrate(domain: Domain, {values}: {values: any}) {\n  if (!is.domain(domain)) {\n    throwError('first argument of hydrate should be domain')\n  }\n  if (!isObject(values)) {\n    throwError('values property should be an object')\n  }\n\n  const {storeWatches, storeWatchesRefs} = fillValues({\n    flatGraphUnits: flatGraph(domain),\n    values: normalizeValues(values),\n    collectWatches: true,\n  })\n\n  launch({\n    target: storeWatches,\n    params: storeWatchesRefs.map(({current}) => current),\n  })\n}\n\nfunction fillValues({\n  flatGraphUnits,\n  values,\n  collectWatches,\n}: {\n  flatGraphUnits: Graph[]\n  values: Record<string, any>\n  collectWatches: boolean\n}) {\n  const storeWatches = []\n  const storeWatchesRefs = []\n  const refsMap = {} as Record<string, StateRef>\n  const predefinedRefs = new Set()\n  const valuesSidList = Object.getOwnPropertyNames(values)\n  for (const node of flatGraphUnits) {\n    const {reg} = node\n    const {op, unit, sid} = node.meta\n    if (unit === 'store') {\n      if (sid && includes(valuesSidList, sid)) {\n        const {state} = node.scope\n        state.current = values[sid]\n        predefinedRefs.add(state)\n      }\n    }\n    if (collectWatches && op === 'watch') {\n      const owner = node.family.owners[0]\n      if (owner.meta.unit === 'store') {\n        storeWatches.push(node)\n        storeWatchesRefs.push(owner.scope.state)\n      }\n    }\n    for (const id in reg) {\n      refsMap[id] = reg[id]\n    }\n  }\n  const refGraph = createRefGraph(refsMap)\n  const result = toposort(refGraph)\n  forEach(result, id => {\n    execRef(refsMap[id])\n  })\n\n  return {\n    storeWatches,\n    storeWatchesRefs,\n  }\n  function execRef(ref: StateRef) {\n    let isFresh = false\n    if (ref.before && !predefinedRefs.has(ref)) {\n      for (const cmd of ref.before) {\n        switch (cmd.type) {\n          case 'map': {\n            const from = cmd.from\n            ref.current = cmd.fn(from.current)\n            break\n          }\n          case 'field': {\n            const from = cmd.from\n            if (!isFresh) {\n              isFresh = true\n              if (Array.isArray(ref.current)) {\n                ref.current = [...ref.current]\n              } else {\n                ref.current = {...ref.current}\n              }\n            }\n            ref.current[cmd.field] = from.current\n            break\n          }\n          case 'closure':\n            break\n        }\n      }\n    }\n    if (!ref.after) return\n    const value = ref.current\n    for (const cmd of ref.after) {\n      const to = cmd.to\n      // if (predefinedRefs.has(to)) continue\n      switch (cmd.type) {\n        case 'copy':\n          to.current = value\n          break\n        case 'map':\n          to.current = cmd.fn(value)\n          break\n      }\n    }\n  }\n}\n\nfunction createRefGraph(refsMap: Record<string, StateRef>) {\n  const items = Object.values(refsMap)\n  const refGraph = {} as Record<string, string[]>\n  for (const {id} of items) {\n    refGraph[id] = []\n  }\n  //prettier-ignore\n  for (const {id, before, after} of items) {\n    before && forEach(before, cmd => {\n      refGraph[cmd.from.id].push(id)\n    })\n    after && forEach(after, cmd => {\n      refGraph[id].push(cmd.to.id)\n    })\n  }\n  return refGraph\n}\n\n/**\nserialize state on server\n*/\nexport function serialize(\n  {clones, getState, cloneOf}: any,\n  {\n    ignore = [],\n    onlyChanges,\n  }: {ignore?: Array<Store<any>>; onlyChanges?: boolean} = {},\n) {\n  const result = {} as Record<string, any>\n  if (onlyChanges) {\n    ignore = [...ignore]\n    for (const store of cloneOf.history.stores) {\n      if (getState(store) === store.defaultState) {\n        ignore.push(store)\n      }\n    }\n  }\n  for (const {meta, scope, reg} of clones) {\n    if (meta.unit !== 'store') continue\n    const {sid} = meta\n    if (!sid) continue\n    result[sid] = reg[scope.state.id].current\n  }\n  for (const {sid} of ignore) {\n    if (sid) delete result[sid]\n  }\n  return result\n}\n\n/** bind event to scope */\nexport function scopeBind(unit: any) {\n  if (!forkPage) {\n    throwError('scopeBind cannot be called outside of forked .watch')\n  }\n  const result = forkPage.find(unit)\n  const savedStack = forkPage\n  return (payload: any) => {\n    launch({\n      target: result,\n      params: payload,\n      forkPage: savedStack,\n    })\n  }\n}\n\nfunction normalizeValues(values: Map<Store<any>, any> | Record<string, any>) {\n  if (values instanceof Map) {\n    const result = {} as Record<string, any>\n    for (const [key, value] of values) {\n      result[key.sid!] = value\n    }\n    return result\n  }\n  return values\n}\nexport function fork(\n  domain: Domain,\n  {values, handlers}: {values?: any; handlers?: any} = {},\n) {\n  if (!is.domain(domain)) throwError('first argument of fork should be domain')\n  const needToFill = !!values\n  values = normalizeValues(values || {})\n  const forked = cloneGraph(domain)\n  if (needToFill) {\n    fillValues()\n  }\n  if (handlers) {\n    handlers = normalizeValues(handlers)\n    const handlerKeys = Object.keys(handlers)\n    for (const {scope, meta} of forked.clones) {\n      if (meta.sid && includes(handlerKeys, meta.sid)) {\n        scope.runner.scope.getHandler = () => handlers[meta.sid]\n      }\n    }\n  }\n  return forked\n\n  function fillValues() {\n    const sourceList = flatGraph(domain)\n    const sourceRefsMap = {} as Record<string, StateRef>\n    const refsMap = {} as Record<string, StateRef>\n    const predefinedRefs = new Set()\n    const templateOwnedRefs = new Set<string>()\n    const valuesSidList = Object.getOwnPropertyNames(values)\n    for (const {reg, meta} of sourceList) {\n      const {nativeTemplate} = meta\n      for (const id in reg) {\n        sourceRefsMap[id] = reg[id]\n        if (nativeTemplate) {\n          templateOwnedRefs.add(id)\n        }\n      }\n    }\n    for (const node of forked.clones) {\n      const {reg} = node\n      const {unit, sid} = node.meta\n      if (unit === 'store') {\n        if (sid && includes(valuesSidList, sid)) {\n          const {state} = node.scope\n          reg[state.id].current = values[sid]\n          predefinedRefs.add(state)\n        }\n      }\n      for (const id in reg) {\n        refsMap[id] = reg[id]\n      }\n    }\n    const refGraph = createRefGraph(sourceRefsMap)\n    const result = toposort(refGraph, templateOwnedRefs)\n    forEach(result, id => {\n      execRef(refsMap[id], sourceRefsMap[id])\n    })\n\n    function execRef(ref: StateRef, sourceRef?: StateRef) {\n      let isFresh = false\n      if (sourceRef && sourceRef.before && !predefinedRefs.has(ref)) {\n        for (const cmd of sourceRef.before) {\n          switch (cmd.type) {\n            case 'map': {\n              const from = refsMap[cmd.from.id]\n              ref.current = cmd.fn(from.current)\n              break\n            }\n            case 'field': {\n              const from = refsMap[cmd.from.id]\n              if (!isFresh) {\n                isFresh = true\n                if (Array.isArray(ref.current)) {\n                  ref.current = [...ref.current]\n                } else {\n                  ref.current = {...ref.current}\n                }\n              }\n              ref.current[cmd.field] = from.current\n              break\n            }\n            case 'closure':\n              break\n          }\n        }\n      }\n      if (!sourceRef || !sourceRef.after) return\n      const value = ref.current\n      for (const cmd of sourceRef.after) {\n        const to = refsMap[cmd.to.id]\n        // if (predefinedRefs.has(to)) continue\n        switch (cmd.type) {\n          case 'copy':\n            to.current = value\n            break\n          case 'map':\n            to.current = cmd.fn(value)\n            break\n        }\n      }\n    }\n  }\n}\nfunction toposort(rawGraph: Record<string, string[]>, ignore?: Set<string>) {\n  const graph = {} as Record<string, string[]>\n  for (const id in rawGraph) {\n    graph[id] = [...new Set(rawGraph[id])]\n  }\n  const result = [] as string[]\n  const visited = {} as Record<string, boolean>\n  const temp = {} as Record<string, boolean>\n  for (const node in graph) {\n    if (!visited[node] && !temp[node]) {\n      topologicalSortHelper(node)\n    }\n  }\n  result.reverse()\n  if (ignore && ignore.size > 0) {\n    const processed = [] as string[]\n    const ignored = [...ignore]\n    let item: string | void\n    while ((item = ignored.shift())) {\n      processed.push(item)\n      forEach(graph[item], child => {\n        if (includes(processed, child) || includes(ignored, child)) return\n        ignored.push(child)\n      })\n    }\n    forEach(processed, item => {\n      removeItem(result, item)\n    })\n  }\n  return result\n  function topologicalSortHelper(node: string) {\n    temp[node] = true\n    const neighbors = graph[node]\n    for (let i = 0; i < neighbors.length; i++) {\n      const n = neighbors[i]\n      if (temp[n]) {\n        continue\n        // throw Error('found cycle in DAG')\n      }\n      if (!visited[n]) {\n        topologicalSortHelper(n)\n      }\n    }\n    temp[node] = false\n    visited[node] = true\n    result.push(node)\n  }\n}\nexport function allSettled(\n  start: any,\n  {scope, params: ctx}: {scope: any; params?: any},\n) {\n  if (!is.unit(start))\n    return Promise.reject(Error('first argument should be unit'))\n  const defer = createDefer()\n  //@ts-ignore\n  defer.parentFork = forkPage\n  const {forkInFlightCounter} = scope.graphite.scope\n  forkInFlightCounter.scope.defers.push(defer)\n  const contextStart = scope.find(start)\n\n  const launchUnits = [contextStart]\n  const launchParams = []\n  if (is.effect(start)) {\n    launchParams.push({\n      params: ctx,\n      req: {\n        rs(value: any) {\n          //@ts-ignore\n          defer.value = {status: 'done', value}\n        },\n        rj(value: any) {\n          //@ts-ignore\n          defer.value = {status: 'fail', value}\n        },\n      },\n    })\n  } else {\n    launchParams.push(ctx)\n  }\n  launchUnits.push(forkInFlightCounter)\n  launchParams.push(null)\n  launch({\n    target: launchUnits,\n    params: launchParams,\n    forkPage: scope,\n  })\n  return defer.req\n}\nfunction flatGraph(unit: any) {\n  const list = [] as Graph[]\n  ;(function traverse(node) {\n    if (includes(list, node)) return\n    list.push(node)\n    forEachRelatedNode(node, traverse)\n  })(getGraph(unit))\n  return list\n}\n/**\neverything we need to clone graph section\nreachable from given unit\n*/\nfunction cloneGraph(unit: any) {\n  const list = flatGraph(unit)\n  const refs = new Map()\n  const scope = {\n    defers: [],\n    inFlight: 0,\n    fxID: 0,\n  }\n  const forkPageSetter = step.compute({\n    fn(data, _, stack) {\n      setForkPage(stack.forkPage)\n      return data\n    },\n  })\n  const forkInFlightCounter = createNode({\n    scope,\n    node: [\n      step.compute({\n        fn(_, scope, stack) {\n          if (!stack.parent) {\n            scope.fxID += 1\n            return\n          }\n          if (stack.parent.node.meta.named === 'finally') {\n            scope.inFlight -= 1\n          } else {\n            scope.inFlight += 1\n            scope.fxID += 1\n          }\n        },\n      }),\n      step.barrier({priority: 'sampler'}),\n      step.run({\n        fn(_, scope) {\n          const {inFlight, defers, fxID} = scope\n          if (inFlight > 0 || defers.length === 0) return\n          Promise.resolve().then(() => {\n            if (scope.fxID !== fxID) return\n            forEach(defers.splice(0, defers.length), (defer: any) => {\n              setForkPage(defer.parentFork)\n              defer.rs(defer.value)\n            })\n          })\n        },\n      }),\n    ],\n    meta: {unit: 'forkInFlightCounter'},\n  })\n  const nodeMap = {} as Record<string, Graph>\n  const clones = list.map(node => {\n    const {seq, next, meta, scope, family} = node\n    const result = createNode({\n      node: seq.map(step => ({\n        id: step.id,\n        type: step.type,\n        data: Object.assign({}, step.data),\n        hasRef: step.hasRef,\n      })) as any,\n      child: [...next],\n      meta: Object.assign({forkOf: node}, meta),\n      scope: Object.assign({}, scope),\n    })\n    result.family = {\n      type: family.type,\n      links: [...family.links],\n      owners: [...family.owners],\n    }\n    nodeMap[node.id] = result\n    return result\n  })\n  const page = {} as Record<string, StateRef>\n  forEach(clones, node => {\n    const {\n      reg,\n      scope,\n      meta: {onCopy, op, unit},\n    } = node\n    for (const id in reg) {\n      const ref = reg[id]\n      let newRef = refs.get(ref)\n      if (!newRef) {\n        newRef = {\n          id: ref.id,\n          current: ref.current, //ref.id in values ? values[ref.id] : ref.current,\n        }\n        refs.set(ref, newRef)\n      }\n      page[id] = reg[id] = newRef\n    }\n    if (onCopy) {\n      for (let j = 0; j < onCopy.length; j++) {\n        scope[onCopy[j]] = findClone(scope[onCopy[j]])\n      }\n    }\n    forEachRelatedNode(node, (node, i, siblings) => {\n      siblings[i] = findClone(node)\n    })\n    const itemTag = op || unit\n    switch (itemTag) {\n      case 'store':\n        node.meta.wrapped = wrapStore(node)\n        break\n      case 'event':\n        node.seq.unshift(forkPageSetter)\n        break\n      case 'effect':\n        node.next.push(forkInFlightCounter)\n        node.seq.unshift(forkPageSetter)\n        break\n      case 'fx': {\n        scope.finally.next.push(forkInFlightCounter)\n        node.seq.unshift(forkPageSetter)\n        break\n      }\n      case 'watch':\n        node.seq.unshift(forkPageSetter)\n        break\n    }\n  })\n\n  return {\n    cloneOf: unit,\n    nodeMap,\n    clones,\n    find: findClone,\n    reg: page,\n    getState: (store: any) => findClone(store).meta.wrapped.getState(),\n    graphite: createNode({\n      family: {\n        type: 'domain',\n        links: [forkInFlightCounter, ...clones],\n      },\n      meta: {unit: 'fork'},\n      scope: {forkInFlightCounter},\n    }),\n  }\n  function findClone(unit: any) {\n    unit = getGraph(unit)\n    const index = list.indexOf(unit)\n    if (index === -1) throwError('unit not found in forked scope')\n    return clones[index]\n  }\n}\n\nfunction wrapStore(node: Graph) {\n  return {\n    kind: 'store',\n    getState: () => node.reg[node.scope.state.id].current,\n    updates: {\n      watch: bind(watchUnit, node),\n    },\n    graphite: node,\n    family: node.family,\n  }\n}\nfunction forEachRelatedNode(\n  {next, family, meta}: Graph,\n  cb: (node: Graph, index: number, siblings: Graph[]) => void,\n) {\n  if (meta.unit === 'fork' || meta.unit === 'forkInFlightCounter') return\n  forEach(next, cb)\n  forEach(family.owners, cb)\n  forEach(family.links, cb)\n}\n","export const observableSymbol: any =\n  (typeof Symbol !== 'undefined' && Symbol.observable) || '@@observable'\n","import {kind} from './index.h'\n\nimport {isObject, isFunction} from './is'\n\nexport const unit = (obj: any) =>\n  (isFunction(obj) || isObject(obj)) && 'kind' in obj\n\nconst is = (type: kind) => (obj: any) => unit(obj) && obj.kind === type\n\nexport const store = is('store')\nexport const event = is('event')\nexport const effect = is('effect')\nexport const domain = is('domain')\n","export const throwError = (message: string) => {\n  throw Error(message)\n}\n","//eslint-disable-next-line\nexport * as is from './validate'\nimport {throwError} from './throw'\n\nexport const isObject = (value: any) =>\n  typeof value === 'object' && value !== null\nexport const isFunction = (value: any) => typeof value === 'function'\n\nexport const assertObject = (value: any) => {\n  if (!isObject(value) && !isFunction(value))\n    throwError('expect first argument be an object') // or function\n}\n","const idCount = () => {\n  let id = 0\n  return () => (++id).toString(36)\n}\n\nexport const nextUnitID = idCount()\nexport const nextStepID = idCount()\nexport const nextNodeID = idCount()\n","export const bind = (fn: Function, target: any) => fn.bind(null, target)\nexport const bind2 = (fn: Function, target: any, arg: any) =>\n  fn.bind(null, target, arg)\n","import {StateRef, Run, Filter, Compute, Barrier, Check, Mov} from './index.h'\nimport {nextStepID} from './id'\nimport {bind2} from './bind'\n\nconst cmd = (type: any, hasRef: boolean, data: any): any => ({\n  id: nextStepID(),\n  type,\n  data,\n  hasRef,\n})\n\nlet nextBarrierID = 0\n\nexport const barrier: (data: {priority?: 'barrier' | 'sampler'}) => Barrier = ({\n  priority = 'barrier',\n}) =>\n  cmd('barrier', false, {\n    barrierID: ++nextBarrierID,\n    priority,\n  })\nexport const mov: (data: {\n  from?: 'value' | 'store' | 'stack' | 'a' | 'b'\n  to?: 'stack' | 'a' | 'b'\n  store?: any\n  target?: any\n}) => Mov = ({\n  from = 'store',\n  store,\n  target,\n  to = target ? 'store' : 'stack',\n}) => cmd('mov', from === 'store', {from, store, to, target})\nexport const check: {\n  defined(): Check\n  changed(config: {store: StateRef}): Check\n} = {\n  defined: () => cmd('check', false, {type: 'defined'}),\n  changed: ({store}) => cmd('check', true, {type: 'changed', store}),\n}\nexport const compute: (data: {\n  fn: (data: any, scope: {[key: string]: any}, stack: any) => any\n}) => Compute = bind2(cmd, 'compute', false)\nexport const filter: (data: {\n  fn: (data: any, scope: {[key: string]: any}, stack: any) => any\n}) => Filter = bind2(cmd, 'filter', false)\nexport const run: (data: {\n  fn: (data: any, scope: {[key: string]: any}, stack: any) => any\n}) => Run = bind2(cmd, 'run', false)\nexport const update: (data: {store: StateRef}) => Mov = ({store}) =>\n  mov({from: 'stack', target: store})\n","import {StateRef} from './index.h'\nimport {nextStepID} from './id'\n\nexport const createStateRef = (current?: any): StateRef => ({\n  id: nextStepID(),\n  current,\n})\nexport const readRef = ({current}: StateRef | {current: any}) => current\n","export const callStackAReg = (stack: any, {fn}: any, {a}: any) => fn(stack, a)\nexport const callARegStack = (stack: any, {fn}: any, {a}: any) => fn(a, stack)\nexport const callStack = (stack: any, {fn}: any, _: any) => fn(stack)\n","import {Graph} from './index.h'\n\nexport const getGraph = (graph: any): Graph => graph.graphite || graph\nexport const getOwners = (node: Graph) => node.family.owners\nexport const getLinks = (node: Graph) => node.family.links\nexport const getStoreState = (store: any) => store.stateRef\nexport const getConfig = (opts: any) => opts.config\nexport const getNestedConfig = (opts: any) => opts.É”\nexport const getValue = (stack: any) => stack.value\nexport const getSubscribers = (store: any) => store.subscribers\nexport const getParent = (unit: any) => unit.parent\n","import {Graphite} from './index.h'\nimport {getGraph, getOwners, getLinks} from './getter'\n\nexport const own = (ownerUnit: Graphite, links: Graphite[]) => {\n  const owner = getGraph(ownerUnit)\n  for (let i = 0; i < links.length; i++) {\n    const link = getGraph(links[i])\n    if (owner.family.type !== 'domain') link.family.type = 'crosslink'\n    getOwners(link).push(owner)\n    getLinks(owner).push(link)\n  }\n}\n","import {Graphite, Graph} from './index.h'\nimport {readRef} from './stateRef'\nimport {getGraph, getValue} from './getter'\n\n/** Names of priority groups */\ntype PriorityTag = 'child' | 'pure' | 'barrier' | 'sampler' | 'effect'\n\n/**\n * Position in the current branch,\n * including call stack, priority type\n * and index of next step in the executed Graph\n */\ntype Layer = {\n  idx: number\n  stack: Stack\n  type: PriorityTag\n  id: number\n}\n\n/** Call stack */\ntype Stack = {\n  value: any\n  a: any\n  b: any\n  parent: Stack | null\n  node: Graph\n  page: {[id: string]: any} | null\n  forkPage?: any\n}\n\n/** Queue as linked list or skew heap */\ntype QueueItem = {\n  /** node value */\n  v: Layer\n  /** left node. always null in queue but used in skew heap */\n  l: QueueItem | null\n  /** right node */\n  r: QueueItem | null\n}\ntype QueueBucket = {\n  first: QueueItem | null\n  last: QueueItem | null\n  size: number\n}\n\n/** Dedicated local metadata */\ntype Local = {\n  fail: boolean\n  scope: {[key: string]: any}\n}\n\nlet heap: QueueItem | null = null\n\nconst merge = (a: QueueItem | null, b: QueueItem | null): QueueItem | null => {\n  if (!a) return b\n  if (!b) return a\n\n  let ret\n  const isSameType = a.v.type === b.v.type\n  if (\n    /**\n     * if both nodes has the same PriorityType\n     * and first node is created after second one\n     */\n    (isSameType && a.v.id > b.v.id) ||\n    /** if first node is \"sampler\" and second node is \"barrier\" */\n    (!isSameType && a.v.type === 'sampler')\n  ) {\n    ret = a\n    a = b\n    b = ret\n  }\n  ret = merge(a.r, b)\n  a.r = a.l\n  a.l = ret\n\n  return a\n}\n\n/** queue buckets for each PriorityType */\nconst queue: QueueBucket[] = []\nlet ix = 0\nwhile (ix < 5) {\n  /**\n   * although \"sampler\" and \"barrier\" are using heap instead of linked list,\n   * their buckets are still useful: they maintains size of heap queue\n   */\n  queue.push({first: null, last: null, size: 0})\n  ix += 1\n}\n\nconst deleteMin = () => {\n  for (let i = 0; i < 5; i++) {\n    const list = queue[i]\n    if (list.size > 0) {\n      /**\n       * second bucket is for \"barrier\" PriorityType (used in combine)\n       * and third bucket is for \"sampler\" PriorityType (used in sample and guard)\n       */\n      if (i === 2 || i === 3) {\n        list.size -= 1\n        const value = heap!.v\n        heap = merge(heap!.l, heap!.r)\n        return value\n      }\n      if (list.size === 1) {\n        list.last = null\n      }\n      const item = list.first\n      list.first = item!.r\n      list.size -= 1\n      return item!.v\n    }\n  }\n}\nconst pushFirstHeapItem = (\n  type: PriorityTag,\n  page: {[id: string]: any} | null,\n  node: Graph,\n  parent: Stack | null,\n  value: any,\n  forkPage: any | void,\n) =>\n  pushHeap(\n    0,\n    {\n      a: null,\n      b: null,\n      node,\n      parent,\n      value,\n      page,\n      forkPage,\n    },\n    type,\n  )\nconst pushHeap = (idx: number, stack: Stack, type: PriorityTag, id = 0) => {\n  const priority = getPriority(type)\n  const bucket: QueueBucket = queue[priority]\n  const item: QueueItem = {\n    v: {\n      idx,\n      stack,\n      type,\n      id,\n    },\n    //@ts-ignore\n    l: 0,\n    //@ts-ignore\n    r: 0,\n  }\n  /**\n   * second bucket is for \"barrier\" PriorityType (used in combine)\n   * and third bucket is for \"sampler\" PriorityType (used in sample and guard)\n   */\n  if (priority === 2 || priority === 3) {\n    heap = merge(heap, item)\n  } else {\n    if (bucket.size === 0) {\n      bucket.first = item\n    } else {\n      bucket.last!.r = item\n    }\n    bucket.last = item\n  }\n  bucket.size += 1\n}\n\nconst getPriority = (t: PriorityTag) => {\n  switch (t) {\n    case 'child':\n      return 0\n    case 'pure':\n      return 1\n    case 'barrier':\n      return 2\n    case 'sampler':\n      return 3\n    case 'effect':\n      return 4\n    default:\n      return -1\n  }\n}\n\nconst barriers = new Set()\n\nlet alreadyStarted = false\nexport let currentPage: any = null\nexport let forkPage: any\nexport const setForkPage = (newForkPage: any) => {\n  forkPage = newForkPage\n}\nexport const setCurrentPage = (newPage: any) => {\n  currentPage = newPage\n}\n\n/** main execution method */\nconst exec = () => {\n  const lastStartedState = {alreadyStarted, currentPage, forkPage}\n  alreadyStarted = true\n  let stop\n  let skip\n  let graph\n  let value\n  let page\n  let reg\n  mem: while ((value = deleteMin())) {\n    const {idx, stack, type} = value\n    graph = stack.node\n    currentPage = page = stack.page\n    forkPage = stack.forkPage\n    reg = (page ? page : graph).reg\n    const local: Local = {\n      fail: false,\n      scope: graph.scope,\n    }\n    stop = skip = false\n    for (let stepn = idx; stepn < graph.seq.length && !stop; stepn++) {\n      const step = graph.seq[stepn]\n      const data = step.data\n      switch (step.type) {\n        case 'barrier': {\n          let id = data.barrierID\n          if (page) {\n            id = `${page.fullID}_${id}`\n          }\n          const priority = data.priority\n          if (stepn !== idx || type !== priority) {\n            if (!barriers.has(id)) {\n              barriers.add(id)\n              pushHeap(stepn, stack, priority, id)\n            }\n            continue mem\n          }\n          barriers.delete(id)\n          break\n        }\n        case 'mov': {\n          let value\n          //prettier-ignore\n          switch (data.from) {\n            case 'stack': value = getValue(stack); break\n            case 'a': value = stack.a; break\n            case 'b': value = stack.b; break\n            case 'value': value = data.store; break\n            case 'store':\n              if (!reg[data.store.id]) {\n                // if (!page.parent) {\n                stack.page = page = null\n                reg = graph.reg\n                // }\n              }\n              value = readRef(reg[data.store.id])\n              break\n          }\n          //prettier-ignore\n          switch (data.to) {\n            case 'stack': stack.value = value; break\n            case 'a': stack.a = value; break\n            case 'b': stack.b = value; break\n            case 'store':\n              reg[data.target.id].current = value\n              break\n          }\n          break\n        }\n        case 'check':\n          switch (data.type) {\n            case 'defined':\n              skip = getValue(stack) === undefined\n              break\n            case 'changed':\n              skip = getValue(stack) === readRef(reg[data.store.id])\n              break\n          }\n          break\n        case 'filter':\n          /**\n           * handled edge case: if step.fn will throw,\n           * tryRun will return null\n           * thereby forcing that branch to stop\n           */\n          skip = !tryRun(local, data, stack)\n          break\n        case 'run':\n          /** exec 'compute' step when stepn === idx */\n          if (stepn !== idx || type !== 'effect') {\n            pushHeap(stepn, stack, 'effect')\n            continue mem\n          }\n        case 'compute':\n          stack.value = tryRun(local, data, stack)\n          break\n      }\n      stop = local.fail || skip\n    }\n    if (!stop) {\n      for (let stepn = 0; stepn < graph.next.length; stepn++) {\n        pushFirstHeapItem(\n          'child',\n          page,\n          graph.next[stepn],\n          stack,\n          getValue(stack),\n          stack.forkPage,\n        )\n      }\n    }\n  }\n  alreadyStarted = lastStartedState.alreadyStarted\n  currentPage = lastStartedState.currentPage\n  forkPage = lastStartedState.forkPage\n}\nexport const launch = (unit: any, payload?: any, upsert?: boolean) => {\n  let page = currentPage\n  let stack = null\n  let forkedPage = forkPage\n  if (unit.target) {\n    payload = unit.params\n    upsert = unit.defer\n    page = 'page' in unit ? unit.page : page\n    if (unit.stack) stack = unit.stack\n    forkedPage = unit.forkPage || forkedPage\n    unit = unit.target\n  }\n  if (Array.isArray(unit)) {\n    for (let i = 0; i < unit.length; i++) {\n      pushFirstHeapItem(\n        'pure',\n        page,\n        getGraph(unit[i]),\n        stack,\n        payload[i],\n        forkedPage,\n      )\n    }\n  } else {\n    pushFirstHeapItem('pure', page, getGraph(unit), stack, payload, forkedPage)\n  }\n  if (upsert && alreadyStarted) return\n  exec()\n}\n\n/** try catch for external functions */\nconst tryRun = (local: Local, {fn}: any, stack: Stack) => {\n  try {\n    return fn(getValue(stack), local.scope, stack)\n  } catch (err) {\n    console.error(err)\n    local.fail = true\n  }\n}\n","import {getConfig, getNestedConfig} from './getter'\nimport {assertObject} from './is'\n\nexport const onConfigNesting = (\n  rawConfig: any,\n  fn: (babelData: any, userConfig: any) => void,\n) => {\n  assertObject(rawConfig)\n  if (getNestedConfig(rawConfig)) {\n    fn(getConfig(rawConfig), getNestedConfig(rawConfig))\n  }\n}\n\nexport const processArgsToConfig = (args: any[]): [any[], any | void] => {\n  let metadata\n  onConfigNesting(args[0], (injected, config) => {\n    metadata = injected\n    args = config\n  })\n  return [args, metadata]\n}\n","import {Graph, Graphite} from './index.h'\nimport {getGraph, getOwners, getLinks, getSubscribers} from './getter'\nimport {is} from './is'\nimport {removeItem} from './collection'\n\nconst removeFromNode = (currentNode: Graph, targetNode: Graph) => {\n  removeItem(currentNode.next, targetNode)\n  removeItem(getOwners(currentNode), targetNode)\n  removeItem(getLinks(currentNode), targetNode)\n}\nconst clearNodeNormalized = (\n  targetNode: Graph,\n  deep: boolean,\n  isDomainUnit: boolean,\n) => {\n  targetNode.next.length = 0\n  targetNode.seq.length = 0\n  //@ts-ignore\n  targetNode.scope = null\n  let currentNode\n  let list = getLinks(targetNode)\n  while ((currentNode = list.pop())) {\n    removeFromNode(currentNode, targetNode)\n    if (\n      deep ||\n      (isDomainUnit && !targetNode.meta.sample) ||\n      currentNode.family.type === 'crosslink'\n    ) {\n      clearNodeNormalized(currentNode, deep, isDomainUnit)\n    }\n  }\n  list = getOwners(targetNode)\n  while ((currentNode = list.pop())) {\n    removeFromNode(currentNode, targetNode)\n    if (isDomainUnit && currentNode.family.type === 'crosslink') {\n      clearNodeNormalized(currentNode, deep, isDomainUnit)\n    }\n  }\n}\nconst clearMap = (map: any) => map.clear()\nexport const clearNode = (\n  graphite: Graphite,\n  {\n    deep,\n  }: {\n    deep?: boolean\n  } = {},\n) => {\n  let isDomainUnit = false\n  //@ts-ignore\n  if (graphite.ownerSet) graphite.ownerSet.delete(graphite)\n  if (is.store(graphite)) {\n    clearMap(getSubscribers(graphite))\n  } else if (is.domain(graphite)) {\n    isDomainUnit = true\n    //@ts-ignore\n    const history = graphite.history\n    clearMap(history.events)\n    clearMap(history.effects)\n    clearMap(history.stores)\n    clearMap(history.domains)\n  }\n  clearNodeNormalized(getGraph(graphite), !!deep, isDomainUnit)\n}\n","import {Subscription, Graphite} from './index.h'\nimport {bind2} from './bind'\nimport {clearNode} from './clearNode'\n\nexport const createSubscription = (node: Graphite): Subscription => {\n  const result = bind2(clearNode, node, undefined)\n  result.unsubscribe = result\n  return result\n}\n","import {onConfigNesting} from './config'\nimport {createNode} from './createNode'\nimport {Subscription, Graphite, Cmd} from './index.h'\nimport {createSubscription} from './subscription'\nimport {throwError} from './throw'\nimport {addToRegion} from './region'\n\nexport const createLinkNode = (\n  parent: Graphite,\n  child: Graphite,\n  {\n    node,\n    scope,\n    meta,\n  }: {\n    node?: Array<Cmd | false | void | null>\n    scope?: {[name: string]: any}\n    meta?: {[name: string]: any}\n  },\n) =>\n  addToRegion(\n    createNode({\n      node,\n      parent,\n      child,\n      scope,\n      meta,\n      family: {\n        owners: [parent, child],\n        links: child,\n      },\n    }),\n  )\nexport const forward = (opts: {\n  from: Graphite | Graphite[]\n  to: Graphite | Graphite[]\n  meta?: Record<string, any>\n}): Subscription => {\n  let config\n  onConfigNesting(opts, (injectedData, userConfig) => {\n    config = injectedData\n    opts = userConfig\n  })\n  const {from, to, meta = {op: 'forward'}} = opts\n  if (!from || !to) throwError('from and to fields should be defined')\n  if (config) meta.config = config\n  return createSubscription(\n    addToRegion(\n      createNode({\n        parent: from,\n        child: to,\n        meta,\n        family: {},\n      }),\n    ),\n  )\n}\n","import {step} from './typedef'\nimport {callStack} from './caller'\nimport {createNode} from './createNode'\nimport {Subscription, Unit} from './index.h'\nimport {createSubscription} from './subscription'\nimport {addToRegion} from './region'\nimport {throwError} from './throw'\nimport {isFunction} from './is'\nimport {forkPage} from './kernel'\nimport {getGraph} from './getter'\n\nexport const watchUnit = (\n  unit: Unit,\n  handler: (payload: any) => any,\n): Subscription => {\n  if (!isFunction(handler)) throwError('.watch argument should be a function')\n  if (forkPage) {\n    const forkedNode = forkPage.nodeMap[getGraph(unit).id]\n    if (forkedNode) unit = forkedNode\n  }\n  return createSubscription(\n    addToRegion(\n      createNode({\n        scope: {fn: handler},\n        node: [step.run({fn: callStack})],\n        parent: unit,\n        meta: {op: 'watch'},\n        family: {\n          owners: unit,\n        },\n      }),\n    ),\n  )\n}\n"],"names":["createNode","node","from","source","parent","to","target","child","scope","meta","family","familyRaw","type","sources","arrifyNodes","links","owners","seq","reg","i","length","item","push","addToReg","result","id","nextNodeID","next","getOwners","getLinks","unitObjectName","objOrArr","method","name","comma","key","unit","is","compositeName","fullName","toString","setStoreName","store","rawName","createName","getParent","shortName","currentComposite","path","composite","concat","forEach","list","fn","withRegion","cb","regionStack","value","template","getGraph","createEvent","nameOrConfig","maybeConfig","event","payload","args","currentPage","oldPage","page","setCurrentPage","create","callCreate","graphite","initUnit","forkPage","find","launch","watch","bind","watchUnit","map","config","isObject","mapped","mapName","createComputation","filter","createEventFiltration","step","callStack","filterMap","defined","prepend","contramapped","readTemplate","upward","applyParentHook","nativeTemplate","addToRegion","createStore","defaultState","props","onEvent","off","getSubscribers","set","createSubscription","updateStore","plainState","createStateRef","oldState","updates","createNamedEvent","after","plain","plainStateId","subscribers","Map","stateRef","getState","reachedPage","targetRef","readRef","setState","state","nodeMap","params","defer","reset","units","on","events","Array","isArray","currentSubscription","get","delete","firstState","lastResult","storeState","undefined","innerStore","strict","linkNode","getStoreState","before","includes","loader","unshift","eventOrFn","subscription","of","isFunction","throwError","changed","isStrict","own","combine","handler","stores","onConfigNesting","injectedData","userConfig","structStoreShape","shapeReady","rawHandler","slice","obj","spreadArgs","storeCombination","createDefer","req","Promise","rs","rj","catch","err","createEffect","instance","defaultConfig","getType","onCopy","kind","use","anyway","finally","done","named","status","fail","error","doneData","failData","effectRunner","getHandler","getCurrent","onResolve","onSettled","ok","onReject","then","op","fx","runner","stack","data","upd","savedFork","setForkPage","inFlight","x","pending","amount","attach","injected","effect","mapParams","_","runnerSteps","attached","runnerFn","a","states","computedParams","readStateRef","splice","createApi","setters","metadata","processArgsToConfig","forIn","createDomain","domains","Set","effects","history","domain","hooks","onCreateEvent","createHook","onCreateEffect","onCreateStore","onCreateDomain","forward","fromObservable","observable","assertObject","observableItem","observableSymbol","subscribe","disposer","bind2","clearNode","complete","sample","sid","greedy","clock","isUpward","targetTemplate","sourceRef","createLinkNode","priority","callARegStack","closure","hasSource","sourceState","clockState","callStackAReg","guard","merge","restore","É”","v","split","cases","match","knownCases","current","__","hydrate","values","storeWatches","storeWatchesRefs","flatGraphUnits","collectWatches","refsMap","predefinedRefs","valuesSidList","Object","getOwnPropertyNames","add","owner","toposort","createRefGraph","ref","isFresh","has","cmd","field","execRef","fillValues","flatGraph","normalizeValues","items","refGraph","serialize","clones","cloneOf","ignore","onlyChanges","scopeBind","savedStack","fork","handlers","needToFill","forked","findClone","index","indexOf","refs","forkPageSetter","forkInFlightCounter","defers","fxID","resolve","parentFork","assign","hasRef","forkOf","newRef","j","forEachRelatedNode","siblings","wrapped","wrapStore","cloneGraph","sourceList","sourceRefsMap","templateOwnedRefs","handlerKeys","keys","rawGraph","topologicalSortHelper","temp","neighbors","graph","n","visited","reverse","size","processed","ignored","shift","removeItem","allSettled","start","ctx","reject","Error","launchUnits","launchParams","traverse","Symbol","message","idCount","nextUnitID","nextStepID","arg","nextBarrierID","barrier","barrierID","mov","check","compute","run","update","getConfig","opts","getNestedConfig","getValue","ownerUnit","link","heap","b","ret","isSameType","r","l","queue","ix","first","last","deleteMin","pushFirstHeapItem","pushHeap","idx","getPriority","bucket","t","barriers","alreadyStarted","newForkPage","newPage","upsert","forkedPage","stop","skip","lastStartedState","mem","local","stepn","fullID","tryRun","exec","console","joinName","tag","rawConfig","pos","removeFromNode","currentNode","targetNode","clearNodeNormalized","deep","isDomainUnit","pop","clearMap","clear","ownerSet","unsubscribe","forkedNode","normalizeConfig","part","loc","hookType","rawConfigA","rawConfigB","thru","observer","stateFirst","storeRef","clone","stateNew","rawShape","childRef","defaultShape","sidechain","trigger","acc","hook"],"mappings":"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"}